pipeline {
    agent any
    
    environment {
        DOCKER_CREDENTIALS = credentials('dockerhubcreds')
        DOCKER_REGISTRY = 'gald10102'
        REPO_NAME = 'flask-aws-monitor'  // Change this as needed
        IMAGE_TAG = "${env.BUILD_NUMBER}"
    }
    
    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'feature/pythonapp', url: 'https://github.com/gald10102/FinalExam.git'
            }
        }
        
        stage('Lint & Security Scan') {
            parallel {
                stage('Flake8 Linting') {
                    steps {
                        sh """
                            pip install flake8
                            cd pythonapp
                            flake8 . || true
                        """
                    }
                }
                stage('Bandit Security Scan') {
                    steps {
                        sh """
                            pip install bandit
                            cd pythonapp
                            bandit -r . || true
                        """
                    }
                }
                stage('Dockerfile Linting (Hadolint)') {
                    steps {
                        sh 'hadolint Dockerfile || true'
                    }
                }
                stage('Trivy Security Scan') {
                    steps {
                        sh """
                            trivy image --exit-code 1 --no-progress $DOCKER_REGISTRY/$REPO_NAME:$IMAGE_TAG || true
                        """
                    }
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image
                    sh """
                        cd pythonapp
                        docker build -t $DOCKER_REGISTRY/$REPO_NAME:$IMAGE_TAG .
                        docker tag $DOCKER_REGISTRY/$REPO_NAME:$IMAGE_TAG $DOCKER_REGISTRY/$REPO_NAME:latest
                    """
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
               script {
                        sh """
                        docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWOR
                        docker push ${DOCKER_IMAGE}
                        """
                    }
                }
            }
        }
    
    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed! Check logs for details.'
        }
    }
}
